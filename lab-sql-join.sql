-- 1. List the number of films per category.
SELECT category.name, COUNT(film_category.film_id) as num_films
FROM category
	INNER JOIN film_category ON category.category_id = film_category.category_id
GROUP BY film_category.category_id 
ORDER BY num_films DESC;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT st.store_id, city.city, country.country
FROM `store` as st 
	INNER JOIN address ON st.address_id = address.address_id
	INNER JOIN city ON address.city_id = city.city_id
	INNER JOIN country ON city.country_id = country.country_id;

-- 3. Calculate the total revenue generated by each store in dollars
SELECT st.store_id, SUM(payment.amount) as total_revenue
FROM `store` as st 
	INNER JOIN inventory ON st.store_id = inventory.store_id
	INNER JOIN rental ON inventory.inventory_id = rental.inventory_id
	INNER JOIN payment ON rental.rental_id = payment.rental_id
GROUP BY st.store_id;

-- 4. Determine the average running time of films for each category.
SELECT c.name as category, AVG(f.length) as running_time
FROM film as f
	INNER JOIN film_category as fc ON f.film_id = fc.film_id
	INNER JOIN category as c ON fc.category_id = c.category_id
GROUP BY c.category_id;

-- Bonus
-- 5.Identify the film categories with the longest average running time.
-- Assuming top 5 is expected
SELECT c.name as category, AVG(f.length) as running_time
FROM film as f
	INNER JOIN film_category as fc ON f.film_id = fc.film_id
	INNER JOIN category as c ON fc.category_id = c.category_id
GROUP BY c.category_id
ORDER BY running_time
LIMIT 5;

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title as movie, COUNT(r.rental_id) as num_times_rented
FROM film as f
	INNER JOIN inventory as i ON f.film_id = i.film_id
	INNER JOIN rental as r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id
ORDER BY num_times_rented DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT (COUNT(DISTINCT i.inventory_id) - (COUNT(rental_date) - COUNT(return_date))) > 0 as is_available
	FROM inventory as i 
	INNER JOIN film as f ON f.film_id = i.film_id
	LEFT JOIN rental as r ON i.inventory_id = r.inventory_id
WHERE  f.title LIKE "Academy Dinosaur" AND store_id = 1;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT  f.title, 
		CASE 
			WHEN (COUNT(DISTINCT i.inventory_id) - (COUNT(rental_date) - COUNT(return_date))) > 0 THEN 'Available'
			ELSE 'NOT available.'
		END AS is_available	
FROM inventory as i 
	RIGHT JOIN film as f ON f.film_id = i.film_id
	LEFT JOIN rental as r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id;
